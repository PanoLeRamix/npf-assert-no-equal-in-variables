%info
Test throughput through two NICs using DPDK

%config

//Graph title
title=DPDK L2 FastUDPGen + Fwd test
timeout=10

//Axis name
var_names={LENGTH:Length,result:Throughput,TXCPU:Transmit CPU,RXCPU:Receive CPU}
n_retry=1
acceptable=0.01
n_runs=3
var_serie=LENGTH
require_tags={dpdk}


%variables
RXCPU={0,2}
fastregression:RXCPU=2
LENGTH=[64*1024]
fastregression:LENGTH={64,256,1024}

//Default
TXCPU=0

//Use 0 and 2 to avoid NUMA node change
full:TXCPU={0,2}

FLOWSIZE=1024
BURST=32
BLOCK=false

full:FLOWSIZE=[1*65536]
full:BURST=[1*65536]
full:BLOCK={true,false}

FULL_TIME=1
full:FULL_TIME={0,1}
TEST_TIME=2
full:TEST_TIME={1,2,3}

fastregression:TEST_TIME=2

%script@dut sudo=true
click -n 4 -c 0xf -- CONFIG || click --dpdk -n 4 -c 0xf -- CONFIG

%file@dut CONFIG

define($MAC0 ${dut:0:mac})
define($MAC1 ${dut:1:mac})

define($IP0 ${dut:0:ip})
define($IP1 ${dut:1:ip})
//fd0 :: FromDPDKDevice(0);
td0 :: ToDPDKDevice(${dut:0:pci}, BLOCKING $BLOCK);
fd1 :: FromDPDKDevice(${dut:1:pci});
td1 :: ToDPDKDevice(${dut:1:pci});

fu0 :: FastUDPFlows(RATE 0, LIMIT -1, LENGTH $LENGTH, SRCETH $MAC0, DSTETH $MAC1,
SRCIP $IP0, DSTIP $IP1, FLOWS 1, FLOWSIZE $FLOWSIZE, ACTIVE false)
    -> uq :: Unqueue($BURST)
    -> td0;
StaticThreadSched(fu0 0)
StaticThreadSched(uq $TXCPU)

adv0 :: FastUDPFlows(RATE 1, LIMIT -1, LENGTH 64, SRCETH $MAC0, DSTETH $MAC1, SRCIP $IP0, DSTIP $IP1, FLOWS 1, FLOWSIZE 1)
    -> Unqueue(1)
    -> td0;
adv1 :: FastUDPFlows(RATE 1, LIMIT -1, LENGTH 64, SRCETH $MAC1, DSTETH $MAC0, SRCIP $IP1, DSTIP $IP0, FLOWS 1, FLOWSIZE 1)
    -> Unqueue(1)
    -> td1;

fd1
    -> s :: Switch(0) [0]
    -> c :: Classifier(0/${dut:1:raw_mac} 6/${dut:0:raw_mac})
s[1]
    -> ac :: AverageCounter
    -> Discard;

StaticThreadSched(fd1 $RXCPU)

Script(     print "Waiting for link initialization...")

c[0]
-> link_established :: Script(TYPE PACKET,
                        print "Link established !",
                        write adv0.active false,
                        write adv1.active false,
                        wait 50ms,
                        write s.switch 1,
                        print "Launching test !",
                        write fu0.active true,
                        wait $FULL_TIMEs,
                        write ac.reset,
                        wait $TEST_TIMEs,
                        print "RESULT $(add $(mul $(ac.byte_rate) 8) $(mul $(ac.count) 24))",
                        stop);
