%info
Click Router w/ 2 Networks using DPDK I/O and IPerf

This configuration uses 4 NICs. It propose 3 roles : "client" is a pktgen with 1 NIC, the router itself as "dut" with 2 NIC
and a packet sink as "server" with 1 NIC.

NICs of the DUT are supposed to be connected to a switch and bound to a DPDK compatible driver

client and server scripts have iperf as dependencies as click is the software under test but they are needed as pktgen

As for any DPDK application, you must be root on the node executing DPDK

%config
//Timeout for a single script
timeout=10

//Number of runs. Iperf is quite unstable, so we do 5 runs instead of 3
n_runs=5

//Axis name
var_names={LENGTH:Length,result:Throughput,TXCPU:Transmit CPU,RXCPU:Receive CPU}
require_tags={dpdk}

%variables
TIME=[1-10]
BURSTOUT=[1*256]
BURSTIN=[1*256]
CPUFREQ=1200000
MSS=[64*1480]
METHOD={udp:-u -b40G,tcp:}

fastregression:TIME=2
fastregression:BURSTIN=32
fastregression:BURSTOUT=32

%script@client delay=2 deps=iperf 0:ip=10.120.0.100
sudo -E ifconfig ${self:0:ifname} ${self:0:ip} netmask ${self:0:mask}
sudo ip route add dev ${self:0:ifname} 10.120.0.0/24 via ${dut:0:ip}
sudo ip route add dev ${self:0:ifname} 10.121.0.0/24 via ${dut:0:ip}
iperf3 -s &> /dev/null

%script@server delay=3 deps=iperf 0:ip=10.121.0.100
sudo -E ifconfig ${self:0:ifname} ${self:0:ip} netmask ${self:0:mask}
sudo ip route add dev ${self:0:ifname} 10.120.0.0/24 via ${dut:1:ip}
sudo ip route add dev ${self:0:ifname} 10.121.0.0/24 via ${dut:1:ip}

result=$(iperf3 $METHOD -M $MSS -f k -t $TIME -P 1 -Z -c ${client:0:ip} | grep -vE "Sent [0-9]+ datagrams" | tail -n 3 | grep -ioE "[0-9.]+ [kmg]bits")
echo "RESULT $result"

%script@dut 0:ip=10.120.0.1 1:ip=10.121.0.1
//Support for the older DPDK config style of Click
click -n 4 -c 0x1 -- CONFIG || click --dpdk -n 4 -c 0x1 -- CONFIG

%file CONFIG
define ($MTU 1500)
define ($bout ${BURSTOUT})
define ($bin ${BURSTIN})
define ($i 1024)
tol :: Discard(); //ToHost normally

elementclass Input { $device,$ip,$eth |

    FromDPDKDevice($device, BURST $bin) ->

    c0 :: Classifier(    12/0806 20/0001,
                         12/0806 20/0002,
                         12/0800,
                         -);

    // Respond to ARP Query
    c0[0] -> arpress :: ARPResponder($ip $eth);
    arpress[0] -> Print("ARP QUERY") -> [1]output;

    // Deliver ARP responses to ARP queriers as well as Linux.
    t :: Tee(2);
    c0[1] -> t;
    t[0] -> Print("Input to linux") -> [2]output;
    t[1] -> Print("Arp response received") -> [3]output;

    //Normal IP tou output 0
    c0[2] -> [0]output;

    // Unknown ethernet type numbers.
    c0[3] -> Print() -> Discard();
}


td0 :: ToDPDKDevice(${dut:0:pci} , BURST $bout, IQUEUE $i, BLOCKING true)
td1 :: ToDPDKDevice(${dut:1:pci} , BURST $bout, IQUEUE $i, BLOCKING true)

input0 :: Input(${dut:0:pci}, ${dut:0:ip}, ${dut:0:mac});
input1 :: Input(${dut:1:pci}, ${dut:1:ip}, ${dut:1:mac});

arpq0 :: ARPQuerier(${dut:0:ip}, ${dut:0:mac});
arpq1 :: ARPQuerier(${dut:1:ip}, ${dut:1:mac});

input0[1] -> td0;
input1[1] -> td1;

input0[2] -> tol;
input1[2] -> tol;

input0[3] -> [1]arpq0;
input1[3] -> [1]arpq1;

arpq0 -> td0;
arpq1 -> td1;

// IP routing table.
rt :: LookupIPRouteMP(   ${dut:0:ip}/24 0,
                         ${dut:1:ip}/24 1);

// Hand incoming IP packets to the routing table.
// CheckIPHeader checks all the lengths and length fields
// for sanity.
ip ::
Strip(14)
-> CheckIPHeader(INTERFACES ${dut:0:ip}/16 ${dut:1:ip}/16, VERBOSE true)
-> [0]rt;

oerror :: IPPrint("ICMP Error : DF") -> [0]rt;
ttlerror :: IPPrint("ICMP Error : TTL") -> [0]rt;

input0[0] -> Paint(1) -> ip;
input1[0] -> Paint(2) -> ip;

// IP packets for this machine.
rt[0] -> output0 :: IPOutputCombo(1, ${dut:0:ip}, $MTU);
rt[1] -> output1 :: IPOutputCombo(2, ${dut:1:ip}, $MTU);

output0[3] -> ICMPError(${dut:0:ip}, timeexceeded, SET_FIX_ANNO 0) -> ttlerror;
output1[3] -> ICMPError(${dut:1:ip}, timeexceeded, SET_FIX_ANNO 0) -> ttlerror;

output0[4] -> ICMPError(${dut:0:ip}, unreachable, needfrag, SET_FIX_ANNO 0) -> oerror;
output1[4] -> ICMPError(${dut:1:ip}, unreachable, needfrag, SET_FIX_ANNO 0) -> oerror;

output0[2] -> ICMPError(${dut:0:ip}, parameterproblem, SET_FIX_ANNO 0) -> oerror;
output1[2] -> ICMPError(${dut:1:ip}, parameterproblem, SET_FIX_ANNO 0) -> oerror;

output0[1] -> ICMPError(${dut:0:ip}, redirect, host, SET_FIX_ANNO 0) -> IPPrint("ICMP Error : Redirect") -> arpq0;
output1[1] -> ICMPError(${dut:1:ip}, redirect, host, SET_FIX_ANNO 0) -> IPPrint("ICMP Error : Redirect") -> arpq1;

output0[0] -> arpq0;
output1[0] -> arpq1;
