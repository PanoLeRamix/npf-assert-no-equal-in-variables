%info
Click Router using DPDK

Using FastClick as pktgen to load the router

This configuration uses 2 roles each with 2 NICs. It has 2 roles : "client" is a pktgen with 2 NIC, one to send traffic and the other to receive it and the router itself as "dut" with 2 NIC.

NICs are supposed to be connected to a switch and bound to a DPDK compatible driver

As for any DPDK application, you must be root on the node executing DPDK or allow sudo without password

%config
//Timeout for a single script
timeout=120
default_repo=fastclick

//Axis names
var_names={LENGTH:Length,result:Throughput,TXCPU:Transmit CPU,RXCPU:Receive CPU,GEN_LENGTH:Packet length,BURSTOUT:Output burst,BURSTIN:Input burst}
require_tags={dpdk}
role_exclude={client+dut}
default_role_map={server:dut}

//For smaller graph
tight:var_names+={result:Throughput (GBits/s)}
tight:var_format={result:%d}
tight:var_divider={result:G}

%variables
//Parameters for the router itself
BURSTOUT=[1*256]
BURSTIN=[4*256]
CPU=1
CHECKSUM={true,false}
nochecksum:CHECKSUM=false

//Parameters for the packet generator
GEN_BURST=256
GEN_LENGTH=[64*1500]
GEN_QUICK_CLONE=1
GEN_STOP=1600000
GEN_FLOWS=5
GEN_FLOWSIZE=20
GEN_TIME=5

fastregression:BURSTIN={32,256}
fastregression:BURSTOUT={32,256}
fastregression:GEN_LENGTH={64,1500}
fastregression:CHECKSUM=true

lengthonly:BURSTIN=32
lengthonly:BURSTOUT=32

%-nobind:import@client dpdk-bind NIC=0
%-nobind:import@client dpdk-bind NIC=1
%-nobind:import@dut dpdk-bind NIC=0
%-nobind:import@dut dpdk-bind NIC=1

%import@client fastclick-udpgen-dual 0:ip=10.120.0.100 1:ip=10.121.0.100

%script@dut 0:ip=10.120.0.1 1:ip=10.121.0.1 sudo=true
//Support for the older DPDK config style of Click
click -n 4 -l 0-$(($CPU - 1)) -- CONFIG || click --dpdk -n 4 -l 0-$(($CPU - 1)) -- CONFIG

%file CONFIG
define ($MTU 1500)
define ($bout ${BURSTOUT})
define ($bin ${BURSTIN})
define ($i 1024)
tol :: Discard(); //ToHost normally

elementclass Input { $device,$ip,$eth |

    FromDPDKDevice($device, BURST $bin, PROMISC false) ->

    c0 :: Classifier(    12/0806 20/0001,
                         12/0806 20/0002,
                         12/0800,
                         -);

    // Respond to ARP Query
    c0[0] -> arpress :: ARPResponder($ip $eth);
    arpress[0] -> Print("ARP QUERY") -> [1]output;

    // Deliver ARP responses to ARP queriers as well as Linux.
    t :: Tee(2);
    c0[1] -> t;
    t[0] -> Print("Input to linux") -> [2]output;
    t[1] -> Print("Arp response received") -> [3]output;

    //Normal IP to output 0
    c0[2] -> [0]output;

    // Unknown ethernet type numbers.
    c0[3] -> Print() -> Discard();
}


td0 :: ToDPDKDevice(${dut:0:pci}, BURST $bout, IQUEUE $i, BLOCKING true)
td1 :: ToDPDKDevice(${dut:1:pci}, BURST $bout, IQUEUE $i, BLOCKING true)

input0 :: Input(${dut:0:pci}, ${dut:0:ip}, ${dut:0:mac});
input1 :: Input(${dut:1:pci}, ${dut:1:ip}, ${dut:1:mac});

arpq0 :: ARPQuerier(${dut:0:ip}, ${dut:0:mac});
arpq1 :: ARPQuerier(${dut:1:ip}, ${dut:1:mac});

input0[1] -> td0;
input1[1] -> td1;

input0[2] -> tol;
input1[2] -> tol;

input0[3] -> [1]arpq0;
input1[3] -> [1]arpq1;

arpq0 -> td0;
arpq1 -> td1;

// IP routing table.
rt :: LookupIPRouteMP(   ${dut:0:ip}/24 0,
                         ${dut:1:ip}/24 1);

// Hand incoming IP packets to the routing table.
// CheckIPHeader checks all the lengths and length fields
// for sanity.
ip ::
Strip(14)
-> CheckIPHeader(INTERFACES ${dut:0:ip}/24 ${dut:1:ip}/24, CHECKSUM $CHECKSUM, VERBOSE true)
-> [0]rt;

oerror :: IPPrint("ICMP Error : DF") -> [0]rt;
ttlerror :: IPPrint("ICMP Error : TTL") -> [0]rt;

input0[0] -> Paint(1) -> ip;
input1[0] -> Paint(2) -> ip;

// IP packets for this machine.
rt[0] -> output0 :: IPOutputCombo(1, ${dut:0:ip}, $MTU);
rt[1] -> output1 :: IPOutputCombo(2, ${dut:1:ip}, $MTU);

output0[3] -> ICMPError(${dut:0:ip}, timeexceeded, SET_FIX_ANNO 0) -> ttlerror;
output1[3] -> ICMPError(${dut:1:ip}, timeexceeded, SET_FIX_ANNO 0) -> ttlerror;

output0[4] -> ICMPError(${dut:0:ip}, unreachable, needfrag, SET_FIX_ANNO 0) -> oerror;
output1[4] -> ICMPError(${dut:1:ip}, unreachable, needfrag, SET_FIX_ANNO 0) -> oerror;

output0[2] -> ICMPError(${dut:0:ip}, parameterproblem, SET_FIX_ANNO 0) -> oerror;
output1[2] -> ICMPError(${dut:1:ip}, parameterproblem, SET_FIX_ANNO 0) -> oerror;

output0[1] -> ICMPError(${dut:0:ip}, redirect, host, SET_FIX_ANNO 0) -> IPPrint("ICMP Error : Redirect") -> arpq0;
output1[1] -> ICMPError(${dut:1:ip}, redirect, host, SET_FIX_ANNO 0) -> IPPrint("ICMP Error : Redirect") -> arpq1;

output0[0] -> arpq0;
output1[0] -> arpq1;


