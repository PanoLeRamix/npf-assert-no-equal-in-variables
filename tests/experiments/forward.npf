%info
4*10G Forwarder

Using tilera or UDP for pktgen

%config
//Timeout for a single script
timeout=30
tilera:timeout=-1
title=

//Axis names
var_names={LENGTH:Length,result:Throughput (Mbps),TXCPU:Transmit CPU,RXCPU:Receive CPU,GEN_LENGTH:Packet length,BURSTOUT:Output burst,BURSTIN:Input burst,ts:Kernel Timestamp,napi:NAPI Budget (Packets),sched:Priority,BURST:Batch size,DESC:Ring size}

role_exclude={client+dut}
default_role_map={server:dut}
var_unit={result: }
udp:var_divider={result:1000000000}
-sched:graph_series_sort=-avg
-same:graph_result_as_variable={THROUGHPUT-(.*):THROUGHPUT,LOSS-(.*):LOSS,PERF-(.*):PERF}
same:var_serie={DESC}
var_log={napi,BURST,DESC}
//tilera:results_expect={result-THROUGHPUT} //Not with the -60 etc

%variables
//Parameters for the router itself
-same,dpdk:BURSTOUT=-1
-same,netmap:BURSTOUT=32
-same:BURSTIN=32
-same:BURSTOUT=32
-same,burst:BURSTOUT=[1*2048]
-same,burst:BURSTIN=[4*2048]
same:BURST=32
same,burst:BURST=[1*2048]
CPU=1
cpu:CPU=[1-8]

CHECKSUM=true
checksum:CHECKSUM={true,false}

cpufreq:CPUFREQ=1200000

//Parameters for the packet generator
udp:GEN_BURST=256
//GEN_LENGTH=[64*1500]
udp:GEN_QUICK_CLONE=1
udp:GEN_STOP=1600000
udp:GEN_FLOWS=5
udp:GEN_FLOWSIZE=20
GEN_TIME=5
INIT_TIME={5}
-udp:GEN_LENGTH=60
thoffset=-1
parallel:thoffset=0

fastregression:BURSTIN={32,256}
fastregression:BURSTOUT={32,256}
fastregression,udp:GEN_LENGTH={64,1500}

-same:descin=256
-same:descout=256
-same,netmap:descin=512
-same,netmap:descout=512
-same,ring:descin=[64*4096]
-same,ring:descout=[64*4096]
-same,netmap,ring:descin=[128*2048]
-same,netmap,ring:descin=[128*2048]
same:DESC=512
same,ring:DESC=[128*2048]


pcap:sniffer=false
//sched,pcap:napi=[1*1024]
//sched,pcap:weight=[1*1024]
sched,pcap:napi={1,32,64,512,1024}
sched,pcap:weight={1,32,64,512,1024}
sched,pcap:sched={-f 1:FIFO,-r 1:RR,-b 0:BATCH,-o 0 nice -n -19:Nice -19,-o 0 nice -n 0:Default,-o 0 nice -n 20:Nice 20}
sched,pcap:ts={0,1}

FNTIN=
FNTOUT=
FNTavg:FNTIN+=-> SetTimestamp
FNTavg:FNTOUT+=
FNTnat:FNTOUT+=-> IPRewriter(pattern 139.165.0.2 1024-65535 - - 0 0)

BLOCKING=true
blocking:BLOCKING={true,false}

FNTcounter:COUNTER={CounterMP,CounterRxWMP,CounterAtomic,CounterLock,CounterRW,CounterPRW,CounterRCU}

%dpdk,-nobind,udp:import@client dpdk-bind NIC=0
%dpdk,-nobind,udp:import@client dpdk-bind NIC=1
%dpdk,-nobind,udp:import@client dpdk-bind NIC=2
%dpdk,-nobind,udp:import@client dpdk-bind NIC=3
%dpdk,-nobind:import@dut dpdk-bind NIC=0
%dpdk,-nobind:import@dut dpdk-bind NIC=1
%dpdk,-nobind:import@dut dpdk-bind NIC=2
%dpdk,-nobind:import@dut dpdk-bind NIC=3
%netmap,-nobind:import@dut netmap-rebind
%pcap,-nobind:import@dut dpdk-bind NIC=0 DRIVER=ixgbe
%pcap,-nobind:import@dut dpdk-bind NIC=1 DRIVER=ixgbe
%pcap,-nobind:import@dut dpdk-bind NIC=2 DRIVER=ixgbe
%pcap,-nobind:import@dut dpdk-bind NIC=3 DRIVER=ixgbe

%pcap:import@dut dev_channels NIC=0 N=1
%pcap:import@dut dev_channels NIC=1 N=1
%pcap:import@dut dev_channels NIC=2 N=1
%pcap:import@dut dev_channels NIC=3 N=1
%pcap:import@dut dev_irq_affinity NIC=0 OFFSET=0 delay=1
%pcap:import@dut dev_irq_affinity NIC=1 OFFSET=1 delay=1
%pcap:import@dut dev_irq_affinity NIC=2 OFFSET=2 delay=1
%pcap:import@dut dev_irq_affinity NIC=3 OFFSET=3 delay=1

%cpufreq:import@dut cpufreq

%late_variables
GLOBAL_ELEMENTS=
TSC:GLOBAL_ELEMENTS+=TSCClock(NOWAIT true, INSTALL true);
JIFFIE:GLOBAL_ELEMENTS+=JiffieClock();
FNTcounter:FNTIN=EXPAND( -> $COUNTER(NO_RATE true) )
FNTcounter:FNTOUT=EXPAND( -> $COUNTER(NO_RATE true) )
maxthreads=-1
parallel:maxthreads=EXPAND( $CPU )
FLUSH_T=-1
same:descin=EXPAND( $DESC )
same:descout=EXPAND( $DESC )
same:BURSTIN=EXPAND( $BURST )
same:BURSTOUT=EXPAND( $BURST )

%dpdk|netmap:require
[ $descin -ge $BURSTIN ]

%dpdk|netmap:require
[ $descout -ge $BURSTOUT ]


%udp:import@client fastclick-udpgen-latency-quad
%udp:script@client 0:ip=10.1.0.2 1:ip=10.2.0.2 2:ip=10.3.0.2 3:ip=10.4.0.2 sudo=true autokill=false

%-udp:script@client delay=8
/home/tom/.tilera/workspace/tester/tester --link xgbe3,xgbe4,xgbe1,xgbe2  -w 16 --dst ${dut:0:mac},${dut:1:mac},${dut:2:mac},${dut:3:mac} --send_time ${GEN_TIME}000000 --init_time ${INIT_TIME}000000 -b $GEN_LENGTH -l $GEN_LENGTH -i 0 -s 1 -f 1 -t RES | tee results
while read line; do
    LENGTH=$(echo $line | grep RES | cut -d' ' -f2)
    if [ -n "$LENGTH" ] ; then
        echo "RESULT-THROUGHPUT-$LENGTH $(echo $line | grep RES | cut -d' ' -f11)"
        echo "RESULT-LOSS-$LENGTH $(echo $line | grep RES | cut -d' ' -f12)"
    fi
done < results
//TH=$(cat results | grep RES | cut -d' ' -f11)
//echo "RESULT-THROUGHPUT $TH"


%udp:script@dut 0:ip=10.1.0.1 1:ip=10.2.0.1 2:ip=10.3.0.1 3:ip=10.4.0.1 sudo=true autokill=false



%-click,-fastclick,dpdk:script@dut sudo=true deps=dpdk-test
bwtest -l 0,1,2,3 -n 4 -- 0:e:0 1:e:1 2:e:2 3:e:3

%fastclick,dpdk:script@dut sudo=true
cat IO CONFIG | click --dpdk -n 4 -l 0-$(( $CPU - 1 ))

%fastclick,netmap:script@dut sudo=true delay=4
ethtool -L ${self:0:ifname} combined $(( (int)($CPU / 4) ))
ethtool -L ${self:1:ifname} combined $(( (int)($CPU / 4) ))
ethtool -L ${self:2:ifname} combined $(( (int)($CPU / 4) ))
ethtool -L ${self:3:ifname} combined $(( (int)($CPU / 4) ))
ethtool -G ${self:0:ifname} rx $descin tx $descout
ethtool -G ${self:1:ifname} rx $descin tx $descout
ethtool -G ${self:2:ifname} rx $descin tx $descout
ethtool -G ${self:3:ifname} rx $descin tx $descout
ifconfig ${self:0:ifname} up
ifconfig ${self:1:ifname} up
ifconfig ${self:2:ifname} up
ifconfig ${self:3:ifname} up
cat IO CONFIG | click -j $CPU -a

%pcap:script@dut sudo=true
ifconfig ${dut:0:ifname} up
ifconfig ${dut:1:ifname} up
ifconfig ${dut:2:ifname} up
ifconfig ${dut:3:ifname} up
sleep 1
echo $napi > /proc/sys/net/core/netdev_budget
echo "Budget :"
cat /proc/sys/net/core/netdev_budget
echo $ts > /proc/sys/net/core/netdev_tstamp_prequeue
echo "TS :"
cat /proc/sys/net/core/netdev_tstamp_prequeue
echo $weight > /proc/sys/net/core/dev_weight
cat CONFIG | chrt $sched click -j $CPU -a

%fastclick,netmap,-queue:file IO
fd0 :: FromNetmapDevice(netmap:${dut:0:ifname}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NUMA false);
fd1 :: FromNetmapDevice(netmap:${dut:1:ifname}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NUMA false);
fd2 :: FromNetmapDevice(netmap:${dut:2:ifname}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NUMA false);
fd3 :: FromNetmapDevice(netmap:${dut:3:ifname}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NUMA false);
td0 :: ToNetmapDevice(netmap:${dut:0:ifname} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3)
td1 :: ToNetmapDevice(netmap:${dut:1:ifname} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3)
td2 :: ToNetmapDevice(netmap:${dut:2:ifname} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3)
td3 :: ToNetmapDevice(netmap:${dut:3:ifname} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3)

%fastclick,netmap,queue:file IO
fd0 :: FromNetmapDevice(netmap:${dut:0:ifname}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NUMA false);
fd1 :: FromNetmapDevice(netmap:${dut:1:ifname}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NUMA false);
fd2 :: FromNetmapDevice(netmap:${dut:2:ifname}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NUMA false);
fd3 :: FromNetmapDevice(netmap:${dut:3:ifname}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NUMA false);
td0 :: Queue -> t0 :: ToNetmapDevice(netmap:${dut:0:ifname} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3)
td1 :: Queue -> t1 :: ToNetmapDevice(netmap:${dut:1:ifname} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3)
td2 :: Queue -> t2 :: ToNetmapDevice(netmap:${dut:2:ifname} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3)
td3 :: Queue -> t3 :: ToNetmapDevice(netmap:${dut:3:ifname} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3)

StaticThreadSched(fd0 0, td0 0, t0 0);
StaticThreadSched(fd1 1, td1 1, t1 1);
StaticThreadSched(fd2 2, td2 2, t2 2);
StaticThreadSched(fd3 3, td3 3, t3 3);


%fastclick,dpdk:file IO
fd0 :: FromDPDKDevice(${dut:0:pci}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NUMA false);
fd1 :: FromDPDKDevice(${dut:1:pci}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NUMA false);
fd2 :: FromDPDKDevice(${dut:2:pci}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NUMA false);
fd3 :: FromDPDKDevice(${dut:3:pci}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NUMA false);
td0 :: ToDPDKDevice(${dut:0:pci} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3, TIMEOUT $FLUSH_T)
td1 :: ToDPDKDevice(${dut:1:pci} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3, TIMEOUT $FLUSH_T)
td2 :: ToDPDKDevice(${dut:2:pci} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3, TIMEOUT $FLUSH_T)
td3 :: ToDPDKDevice(${dut:3:pci} , BURST $bout, IQUEUE $i, BLOCKING true, VERBOSE 3, TIMEOUT $FLUSH_T)

%fastclick:file CONFIG
define ($MTU 1500)
define ($bout ${BURSTOUT})
define ($bin ${BURSTIN})
define ($i 4096)

$GLOBAL_ELEMENTS

elementclass Input {$ip,$eth |
    input[0] -> [0]output;

    adv :: FastUDPFlows(RATE 0, LIMIT -1, LENGTH 64, SRCETH $eth, DSTETH $eth, SRCIP $ip, DSTIP $ip, FLOWS 1, FLOWSIZE 1)
    -> MarkMACHeader
    -> rt :: RatedUnqueue(1)
    -> [0]output;

}

fd0 -> input0 :: Input(${dut:0:ip}, ${dut:0:mac});
fd1 -> input1 :: Input(${dut:1:ip}, ${dut:1:mac});
fd2 -> input2 :: Input(${dut:2:ip}, ${dut:2:mac});
fd3 -> input3 :: Input(${dut:3:ip}, ${dut:3:mac});

arpq0:: EtherRewrite(SRC ${dut:0:mac}, DST ${client:0:mac});
arpq1:: EtherRewrite(SRC ${dut:1:mac}, DST ${client:1:mac});
arpq2:: EtherRewrite(SRC ${dut:2:mac}, DST ${client:2:mac});
arpq3:: EtherRewrite(SRC ${dut:3:mac}, DST ${client:3:mac});

input0[0] -> arpq1 $FNTOUT -> td1;
input1[0] -> arpq0 $FNTOUT -> td0;
input2[0] -> arpq3 $FNTOUT -> td3;
input3[0] -> arpq2 $FNTOUT -> td2;

DriverManager(wait,
            read fd0.hw_count,
            read fd1.hw_count,
            read fd2.hw_count,
            read fd3.hw_count,
            read input0/fd.mac,
            read input1/fd.mac,
            read input2/fd.mac,
            read input3/fd.mac,
            read td0.count,
            read td1.count,
            read td2.count,
            read td3.count,
            );

%pcap:file CONFIG
elementclass Processer {
        input->
        /*    Strip(14) ->
            CheckIPHeader(CHECKSUM false) ->
                Unstrip(14)->*/
                    Queue()->
                        output
}

define ($b $BURSTIN)
define ($o $BURSTOUT)
define ($method PCAP)

in1::FromDevice(${dut:0:ifname}, SNIFFER $sniffer, PROMISC 1, BURST $b, METHOD $method)
in2::FromDevice(${dut:1:ifname}, SNIFFER $sniffer, PROMISC 1, BURST $b, METHOD $method)
in3::FromDevice(${dut:2:ifname}, SNIFFER $sniffer, PROMISC 1, BURST $b, METHOD $method)
in4::FromDevice(${dut:3:ifname}, SNIFFER $sniffer, PROMISC 1, BURST $b, METHOD $method)

out1 :: ToDevice(${dut:0:ifname}, BURST $o, METHOD $method)
out2 :: ToDevice(${dut:1:ifname}, BURST $o, METHOD $method)
out3 :: ToDevice(${dut:2:ifname}, BURST $o, METHOD $method)
out4 :: ToDevice(${dut:3:ifname}, BURST $o, METHOD $method)


in1 -> p1 :: Processer() -> arpq0:: EtherRewrite(SRC ${dut:0:mac}, DST ${client:0:mac}) -> out1
in2 -> p2 :: Processer() -> arpq1:: EtherRewrite(SRC ${dut:1:mac}, DST ${client:1:mac}) -> out2
in3 -> p3 :: Processer() -> arpq2:: EtherRewrite(SRC ${dut:2:mac}, DST ${client:2:mac}) -> out3
in4 -> p4 :: Processer() -> arpq3:: EtherRewrite(SRC ${dut:3:mac}, DST ${client:3:mac}) -> out4

StaticThreadSched(in1 0)
StaticThreadSched(in2 1)
StaticThreadSched(in3 2)
StaticThreadSched(in4 3)
StaticThreadSched(out1 0)
StaticThreadSched(out2 1)
StaticThreadSched(out3 2)
StaticThreadSched(out4 3)
StaticThreadSched(p1 0)
StaticThreadSched(p2 1)
StaticThreadSched(p3 2)
StaticThreadSched(p4 3)
