%info
Campus Router

Using FastClick as pktgen to load the router

This configuration uses 2 roles each with 2 NICs. It has 2 roles : "client" is a pktgen with 2 NIC, one to send traffic and the other to receive it and the router itself as "dut" with 2 NIC.

NICs are supposed to be connected to a switch and bound to a DPDK compatible driver

As for any DPDK application, you must be root on the node executing DPDK or allow sudo without password

%config
//Timeout for a single script
timeout=20

//Axis names
var_names={LENGTH:Length,result:Throughput,result-LATENCY:Latency,TXCPU:Transmit CPU,RXCPU:Receive CPU,GEN_LENGTH:Packet length,BURSTOUT:Output burst,BURSTIN:Input burst,BURST:Burst size,DESC:Ring size}
role_exclude={client+dut}
default_role_map={server:dut}
var_unit={result: ,BURST:Packets,DESC:Packets,result-LATENCY:us}
var_divider={result:1000000000,result-LATENCY:1}
graph_series_sort=-avg
var_log={descin,descout,DESC,BURST}
same:graph_combine_variables={BURSTIN+BURSTOUT:BURST,descin+descout:DESC}
same:var_serie={DESC}
dual:graph_subplot_results={RXTHROUGHPUT+LATENCY:common}
dual:graph_subplot_type=axis

%variables
//Parameters for the router itself
BURSTOUT=32
BURSTIN=32
burst:BURSTOUT=[1*1024]
burst:BURSTIN=[4*1024]
netmap,burst:BURSTIN=[1*1024]
CPU=1
cpu:CPU=[1-8]

-udp:GEN_ENDAFTER=32

CHECKSUM=true
checksum:CHECKSUM={true,false}

cpufreq:CPUFREQ=1200000

//Parameters for the packet generator
udp:GEN_BURST=256
udp:GEN_LENGTH=[64*1500]
GEN_QUICK_CLONE=1
udp:GEN_STOP=1600000
udp:GEN_FLOWS=5
udp:GEN_FLOWSIZE=20
udp:GEN_TIME=5

thoffset=-1
parallel:thoffset=0

fastregression:BURSTIN={32,256}
fastregression:BURSTOUT={32,256}
fastregression,udp:GEN_LENGTH={64,1500}

descin=256
descout=256
netmap:descin=512
netmap:descin=512
ring:descin=[128*2048]
ring:descout=[128*2048]

FNTIN=
FNTOUT=
FNTavg:FNTIN+=-> SetTimestamp
FNTavg:FNTOUT+=
FNTnat:FNTOUT+=-> IPRewriter(pattern 139.165.0.2 1024-65535 - - 0 0)

BLOCKING=false

FNTcounter:COUNTER={CounterMP,CounterRxWMP,CounterAtomic,CounterLock,CounterRW,CounterPRW,CounterRCU}


%wrk:late_variables
GEN_CONCURRENT=128
GEN_THREADS=16
GEN_RATE=1000000
HTTP_PORT=80
GEN_TIME=2
WRKNIC=0
WRK_HOST=10.121.0.1
FSIZE=8
HTTP_PORT=80
NGINX_ROOT=/tmp/nginx/
NGINX_PORT=80
FILE_PATH=EXPAND(bin-${FSIZE}K)

%-nobind,-wrk:import@client dpdk-bind NIC=0
%-nobind,-wrk:import@client dpdk-bind NIC=1
%dpdk,-nobind:import@dut dpdk-bind NIC=0
%dpdk,-nobind:import@dut dpdk-bind NIC=1
%netmap:import@dut netmap-bind NIC=0
%netmap:import@dut netmap-bind NIC=0
%-nobind,wrk:import@client dpdk-bind NIC=0 DRIVER=i40e
%-nobind,wrk:import@server dpdk-bind NIC=0 DRIVER=i40e
%cpufreq:import@dut cpufreq

%late_variables
GLOBAL_ELEMENTS=
TSC:GLOBAL_ELEMENTS+=TSCClock(NOWAIT true, INSTALL true);
JIFFIE:GLOBAL_ELEMENTS+=JiffieClock();
FNTcounter:FNTIN=EXPAND( -> $COUNTER(NO_RATE true) )
FNTcounter:FNTOUT=EXPAND( -> $COUNTER(NO_RATE true) )
maxthreads=-1
parallel:maxthreads=EXPAND( $CPU )

%require
[ $descin -ge $BURSTIN ]

%require
[ $descout -ge $BURSTOUT ]

%same:require
[ $descin -eq $descout ]

%same:require
[ $BURSTIN -eq $BURSTOUT ]

%udp:import@client fastclick-udpgen-dual 0:ip=10.120.0.100 1:ip=10.121.0.100 delay=2
%-udp,-wrk:import@client fastclick-replay-dual 0:ip=139.165.0.1 1:ip=10.10.10.1 traceIN=/mnt/traces/201601-1_fullanon_padded.pcap traceOUT=/mnt/traces/201601-2_fullanon_padded.pcap NBUF=5000000 delay=2 nolinktest=1

%wrk:import@client wrk2
%wrk:import@client dev_rate NIC=0 delay=2
%wrk:import@server nginx

%udp:script@dut 0:ip=10.120.0.1 1:ip=10.121.0.1 sudo=true autokill=false
%-udp,-wrk:script@dut 0:ip=139.165.0.2 1:ip=10.10.10.2 sudo=true autokill=false

%wrk:script@dut autokill=false 0:ip=10.120.0.2 1:ip=10.121.0.2


%wrk:script@client sudo=true 0:ip=10.120.0.1 autokill=false
ifconfig ${self:0:ifname} 10.120.0.1 netmask 255.255.0.0 up
ip route add 10.121.0.0/16 via 10.120.0.2 dev ${self:0:ifname}

%wrk:script@server sudo=true 0:ip=10.121.0.1 autokill=false
ifconfig ${self:0:ifname} 10.121.0.1 netmask 255.255.0.0 up
ip route add 10.120.0.0/16 via 10.121.0.2 dev ${self:0:ifname}

%-udp,-wrk:file NET
AddressInfo(INTERNALNET 139.165.0.0/16)
define($DSTMAC ${client:1:mac})

%wrk:file NET
AddressInfo(INTERNALNET 10.121.0.0/24)
define($DSTMAC ${server:0:mac})

%udp:file NET
AddressInfo(INTERNALNET 10.121.0.0/24)
define($DSTMAC ${client:1:mac})

%dpdk,fastclick:file IO
define ($i 1024)
define ($bout ${BURSTOUT})
define ($bin ${BURSTIN})


fd0 :: FromDPDKDevice(${dut:0:pci}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NDESC $descin)
fd1 :: FromDPDKDevice(${dut:1:pci}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads, NDESC $descin)
td0 :: ToDPDKDevice(${dut:0:pci} , BURST $bout, IQUEUE $i, BLOCKING $BLOCKING, VERBOSE 3, NDESC $descout)
td1 :: ToDPDKDevice(${dut:1:pci} , BURST $bout, IQUEUE $i, BLOCKING $BLOCKING, VERBOSE 3, NDESC $descout)

%dpdk,-fastclick:file IO
define ($i 1024)
define ($bout ${BURSTOUT})
define ($bin ${BURSTIN})


fd0 :: FromDPDKDevice(${dut:0:pci}, BURST $bin, PROMISC false, NDESC $descin)
fd1 :: FromDPDKDevice(${dut:1:pci}, BURST $bin, PROMISC false, NDESC $descin)
td0 :: ToDPDKDevice(${dut:0:pci} , BURST $bout, IQUEUE $i, NDESC $descout)
td1 :: ToDPDKDevice(${dut:1:pci} , BURST $bout, IQUEUE $i, NDESC $descout)

StaticThreadSched(fd0 0)
StaticThreadSched(fd1 1)

%netmap:file IO
define ($i 1024)
define ($bout ${BURSTOUT})
define ($bin ${BURSTIN})


fd0 :: FromNetmapDevice(netmap:${dut:0:ifname}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads)
fd1 :: FromNetmapDevice(netmap:${dut:1:ifname}, BURST $bin, PROMISC false, THREADOFFSET $thoffset, VERBOSE 3, MAXTHREADS $maxthreads)
td0 :: ToNetmapDevice(netmap:${dut:0:ifname} , BURST $bout, IQUEUE $i, BLOCKING $BLOCKING, VERBOSE 3)
td1 :: ToNetmapDevice(netmap:${dut:1:ifname} , BURST $bout, IQUEUE $i, BLOCKING $BLOCKING, VERBOSE 3)


%dpdk:script@dut sudo=true
cat IO NET CONFIG | click --dpdk -n 4 -l 0-$(( $CPU - 1 ))

%netmap:script@dut sudo=true
ethtool -L ${self:0:ifname} combined $CPU
ethtool -L ${self:1:ifname} combined $CPU
ethtool -G ${self:0:ifname} rx $descin tx $descout
ethtool -G ${self:1:ifname} rx $descin tx $descout

ifconfig ${self:0:ifname} up
ifconfig ${self:1:ifname} up

cat IO NET CONFIG | click --dpdk -j $CPU -a

%file CONFIG
define ($MTU 1500)

tol :: Discard(); //ToHost normally

$GLOBAL_ELEMENTS

elementclass Input { $ip,$eth |

    input ->

    c0 :: Classifier(    12/0806 20/0001,
                         12/0806 20/0002,
                         12/0800,
                         -);

    // Respond to ARP Query
    c0[0] -> arpress :: ARPResponder($ip $eth);
    arpress[0] -> Print("ARP QUERY") -> [1]output;

    // Deliver ARP responses to ARP queriers as well as Linux.
    t :: Tee(2);
    c0[1] -> t;
    t[0] -> Print("Input to linux") -> [2]output;
    t[1] -> Print("Arp response received") -> [3]output;

    //Normal IP tou output 0
    c0[2] -> [0]output;

    // Unknown ethernet type numbers.
    c0[3] -> Print("Unknown ethernet") -> Discard();
}

fd0 ->
input0 :: Input(${dut:0:ip}, ${dut:0:mac});
fd1 ->
input1 :: Input(${dut:1:ip}, ${dut:1:mac});

//arpq0 :: ARPQuerier(${dut:0:ip}, ${dut:0:mac});
//arpq1 :: ARPQuerier(${dut:1:ip}, ${dut:1:mac});
arpq0:: EtherEncap(0x0800, SRC ${dut:0:mac}, DST ${client:0:mac});
arpq1:: EtherEncap(0x0800, SRC ${dut:1:mac}, DST $DSTMAC);

input0[1] -> td0;
input1[1] -> td1;

input0[2] -> tol;
input1[2] -> tol;

//input0[3] -> [1]arpq0;
//input1[3] -> [1]arpq1;
input0[3] -> Discard;
input1[3] -> Discard;

arpq0 $FNTOUT -> td0;
arpq1 $FNTOUT -> td1;

// IP routing table.
rt :: LookupIPRouteMP(   INTERNALNET 1,
                         0/0 0);

// Hand incoming IP packets to the routing table.
// CheckIPHeader checks all the lengths and length fields
// for sanity.
ip ::
Strip(14)
-> CheckIPHeader(CHECKSUM $CHECKSUM, VERBOSE true)
-> [0]rt;

oerror :: IPPrint("ICMP Error : DF") -> [0]rt;
ttlerror :: IPPrint("ICMP Error : TTL") -> [0]rt;

input0[0] -> Paint(1) $FNTIN -> ip;
input1[0] -> Paint(2) $FNTIN -> ip;

// IP packets for this machine.
rt[0] -> output0 :: IPOutputCombo(1, ${dut:0:ip}, $MTU);
rt[1] -> output1 :: IPOutputCombo(2, ${dut:1:ip}, $MTU);

output0[3] -> ICMPError(${dut:0:ip}, timeexceeded, SET_FIX_ANNO 0) -> ttlerror;
output1[3] -> ICMPError(${dut:1:ip}, timeexceeded, SET_FIX_ANNO 0) -> ttlerror;

output0[4] -> ICMPError(${dut:0:ip}, unreachable, needfrag, SET_FIX_ANNO 0) -> oerror;
output1[4] -> ICMPError(${dut:1:ip}, unreachable, needfrag, SET_FIX_ANNO 0) -> oerror;

output0[2] -> ICMPError(${dut:0:ip}, parameterproblem, SET_FIX_ANNO 0) -> oerror;
output1[2] -> ICMPError(${dut:1:ip}, parameterproblem, SET_FIX_ANNO 0) -> oerror;

output0[1] -> ICMPError(${dut:0:ip}, redirect, host, SET_FIX_ANNO 0) -> IPPrint("ICMP Error : Redirect") -> arpq0;
output1[1] -> ICMPError(${dut:1:ip}, redirect, host, SET_FIX_ANNO 0) -> IPPrint("ICMP Error : Redirect") -> arpq1;

output0[0] -> arpq0;
output1[0] -> arpq1;

DriverManager(wait,
            read fd0.hw_count,
            read fd1.hw_count,
            read fd0.count,
            read fd1.count,
            read fd0.mac,
            read fd1.mac,
            read td0.count,
            read td1.count,
            );
