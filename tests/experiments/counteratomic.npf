%info

%config
var_unit={PPS:packets}
var_divider={PPS:1000000,OPPS:1000000,GEN:1000000,LOST:1000000,ROPPS:1000000,LOSTRATE:1000000}
var_format={PPS:%dMPps,OPPS:%dM,LOST:%dM,ROPPS:%dM,LOSTRATE:%dM}
var_name={PPS:PPS,OPPS:Operations per seconds,COUNTER:Counter type,RATE:Number of reads per write,CPU:Cores,LOST:Uncounted packets,ROPPS:Operations per seconds,LOSTRATE:Packets unaccounted for per seconds,RV:Proportion of reads per write}
paper:graph_markers={}
//graph_combine_variable={ATOMIC+COUNTER}
paper:graph_series_sort=-avg
var_log={RATE}
accept_zero={LOST}
var_ticks={RATE:0+1+2+8+32+128+512+2048+8192+65536}
perf:graph_result_as_variable={PERF-(.*):Perf}
//rate:graph_series_label=$COUNTER - $CPU cores
//rate:graph_variables_as_series={COUNTER,CPU}
rate:var_log+={result-OPPS,result-ROPPS}
rate:var_lim={result-OPPS:10000,result-ROPPS:10000}
-rate,-update,-rv:var_lim={result-OPPS:0-16,result-ROPPS:0-16}
rv:var_log+={RV}
rv:var_lim+={RV:-65536-65536,OPPS:0-10000}
rv:legend_loc=outer center
rv:legend_ncol=3
//rv:legend_mode=expand
rv,-rxwmp:graph_color={5,2,1,5,2,2,2,2,3}
rv:legend_bbox={0,1,1,.15}
rv|rate:var_ticks+={RV:-65536+-1024+-32+-2+0+2+32+1024+65536}
rv,-rxwmp|rate,-rxwmp:var_ticks+={OPPS:0+1+2+10+100+1000+10000}
update,-rxwmp|rv,-rxwmp:var_log+={ROPPS,OPPS}
update|rv:var_grid+={OPPS,OPPS}
update:var_ticks+={OPPS:1+2+4+6+8+10+12,ROPPS:1+2+3+4+6+8+10+12}
rxwmp:var_lim+={OPPS:0-10}

%variables
GEN_BURST=32
GEN_FLOWS=128
GEN_LENGTH=64
GEN_WAIT=5
-rate,-rv,-update:COUNTER={CounterMP,CounterLockMP,CounterAtomic,CounterLock}
update:COUNTER={CounterMP,CounterLockMP,CounterPLockMP,CounterRWMP,CounterPRWMP,CounterRxWMP,CounterAtomic,CounterLock,CounterRW,CounterPRW,CounterRCU}
full:COUNTER={CounterMP,CounterLockMP,CounterPLockMP,CounterRWMP,CounterPRWMP,CounterRxWMP,CounterAtomic,CounterLock,CounterRW,CounterPRW,CounterRCU}
rv:COUNTER={CounterLockMP,CounterRxWMP,CounterLock,CounterRW,CounterPRW,CounterRCU,CounterPLockMP,CounterMP,CounterAtomic}
rate:COUNTER={CounterMP,CounterAtomic,CounterLock,CounterRW,CounterPRW,CounterRCU}
rxwmp:COUNTER={CounterRxWMP:Agnostic,CounterRxWMPPR:Prefer read,CounterRxWMPPW:Prefer write}
rxwmp:COUNTER={CounterRxWMP:Agnostic,CounterRxWMPPR:Prefer read,CounterRxWMPPW:Prefer write,CounterRWMP,CounterPRWMP,CounterLockMP,CounterPLockMP}
CPU=[1-16]
rate|rv:CPU=16
NORATE=true
rate:RATE=[1*65536]
-rate,-rv:RATE=0
update:RATE=1
rv:RV={-65536,-32768,-16384,-8192,-4096,-2048,-1024,-512,-256,-128,-64,-32,-16,-8,-4,-2,0,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16386,32768,65536}
GEN_TOT={2048}

%late_variables
CPUEX=[0-31]
ALL_GENS=EXPAND(gen${CPUEX} :: Generator($CPUEX, ${client:0:mac}, ${dut:1:mac}, ${client:0:ip}, ${dut:1:ip}) -> cnt);
GENS=HEAD($CPU,$ALL_GENS)
ALL_GENS=


%late_variables
GEN_PROMISC=true
-rv:PASS=1


%rv:late_variables
//RV = 65536 -> RATE=65536, PASS=1        Read 65536 times for 1 write
//                                        Read 2 time for 1 write
//RV = 1 -> RATE=1, PASS=1                Read 1 time for 1 write
//RV = 0 -> RATE=1, PASS=1                Read 1 time for 1 write
//RV = -1 -> RATE=1, PASS=1               Read 1 time for 1 write
//                      PASS = 2          Read 1 time for 2 writes
//RV = -65536 -> RATE=1 PASS=65536        Read 1 time for 65536 writes
RATE=EXPAND( $(( $RV if ($RV > 0) else 1 )) )
PASS=EXPAND( $(( -($RV) if ($RV < 0) else 1 )) )


%late_variables
CPUEX=[0-31]
ALL_LAUNCH=EXPAND(write gen${CPUEX}/replay.stop -1, write gen${CPUEX}/replay.active true,)
LAUNCHS=HEAD($CPU,$ALL_LAUNCH)

%late_variables
CPUEX=[0-31]
ALL_STOP=EXPAND(write gen${CPUEX}/replay.active false,)
STOPS=HEAD($CPU,$ALL_STOP)

%late_variables
CPUEX=[0-31]
ALL_WAIT=EXPAND(wait,)
WAITS=HEAD($CPU,$ALL_WAIT)

%late_variables
CPUEX=[0-31]
ALL_COUNT=EXPAND($(gen${CPUEX}/c.count) )
COUNTS=HEAD($CPU,$ALL_COUNT)

%late_variables
perf:GEN_WAIT=20
perf:PERF_OPT=EXPAND( --cpu 0-$CPU )

%perf:import@dut perf-functions delay=12

%script@dut sudo=true
click -j $J -a T_CONFIG

%file@dut T_CONFIG

elementclass Generator { $th, $srcmac, $dstmac, $srcip, $dstip |

    fudp :: FastUDPFlows(RATE 0, LIMIT $GEN_TOT, LENGTH $GEN_LENGTH, SRCETH $srcmac, DSTETH $dstmac, SRCIP $srcip, DSTIP $dstip, FLOWS $GEN_FLOWS, FLOWSIZE $GEN_BURST)
    -> MarkMACHeader
    -> replay :: ReplayUnqueue(STOP 0, QUICK_CLONE true, BURST $GEN_BURST)
    -> c :: Counter(ATOMIC 0, NO_RATE true)
    -> rate :: CounterTest(cnt, RATE $RATE, PASS $PASS)
    -> output;

    StaticThreadSched(replay $th)
}

cnt :: $COUNTER(NO_RATE $NORATE) -> Discard;

$GENS



d :: DriverManager(
    $WAITS
    print "Launching test...",
    $LAUNCHS
    set s $(now_steady),
    wait $GEN_WAIT,
    set e $(now_steady),
    $STOPS
    set ttime $(sub $e $s),
    print "RESULT-PPS $(div $(cnt.count) $ttime)",
    print "RESULT-TIME $ttime",
    set ops $(mul $(div $(cnt.count) $GEN_BURST) $(add $(div $RATE $PASS) 1)),
    print "RESULT-OPS $ops",
    print "RESULT-OPPS $(div $ops $ttime)",
    set tot $(add $COUNTS),
    print "RESULT-GEN $tot",
    set rops $(mul $(div $tot $GEN_BURST) $(add $(div $RATE $PASS) 1)),
    print "RESULT-ROPPS $(div $rops $ttime)",
    print "RESULT-LOST $(sub $tot $(cnt.count))",
    print "RESULT-LOSTRATE $(div $(sub $tot $(cnt.count)) $ttime)",
)
StaticThreadSched(d $CPU)
